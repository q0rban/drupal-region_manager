<?php
// $Id$

/**
 * @file
 *   Adds add/remove block controls to select regions.
 */

/**
 * Define constant module permission states.
 */
define('REGION_MANAGER_ALL_ENABLED', 0);
define('REGION_MANAGER_ALL_DISABLED', 1);
define('REGION_MANAGER_CUSTOM', 2);

/**
 * Implementation of hook_help().
 */
function region_manager_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/region_manager':
      return t('Please select for each theme which regions you would like to have region manager available on.');
  }
}

/**
 * Implementation of hook_init().
 */
function region_manager_init() {
  if (user_access('manage regions')) {
    // Add css and js.
    $path = drupal_get_path('module', 'region_manager');
    drupal_add_css($path .'/region_manager.css');
    drupal_add_js($path .'/region_manager.js');

    // Add the menus.
    foreach(variable_get('region_manager_regions', array()) as $theme) {
      foreach($theme as $region => $value) {
        if ($value) {
          //$menu = region_manager_region_menu($region);
          //drupal_set_content($region, 'hi');
        }
      }
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function region_manager_menu() {
  $items = array();

  $items['admin/settings/region_manager'] = array(
    'title' => 'Region Manager regions',
    'description' => 'Configure region manager settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('region_manager_regions_form'),
    'access arguments' => array('administer region manager'),
    'file' => 'region_manager.admin.inc',
  );
  $items['admin/settings/region_manager/regions'] = array(
    'title' => 'Regions',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  foreach(list_themes() as $theme) {
    if ($theme->status) {
      $items['admin/settings/region_manager/'. $theme->name] = array(
        'title' => $theme->info['name'],
        'description' => 'Configure region manager settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('region_manager_blocks_form', 3),
        'access arguments' => array('administer region manager'),
        'file' => 'region_manager.admin.inc',
        'type' => MENU_LOCAL_TASK,
      );
    }
  }

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function region_manager_perm() {
  return array('administer region manager');
}

/**
 * Implementation of hook_theme().
 */
function region_manager_theme() {
  $items = array();

  $items['region_manager_blocks_form'] = array(
    'arguments' => array('form' => array()),
  );

  return $items;
}

/**
 * Get a list of available regions from a specified theme.
 *
 * @param $theme_key
 *   The name of a theme.
 * @return
 *   An array of regions in the form $region['name'] = 'description'.
 */
function region_manager_region_list($theme_key) {
  $settings = variable_get('region_manager_regions', array());
  $regions = system_region_list($theme_key);
  if (!empty($settings)) {
    return array_intersect_key($regions, (array) array_filter($settings[$theme_key]));
  }
}

/**
 * Returns a menu for the associated region.
 */
function region_manager_region_menu($region) {
  
}

/**
 * Loader function for regions by theme or rid.
 *
 * @param $theme_key
 *   A string containing either a theme key only, or theme key and region name
 *   delimited by ':'.
 * @return
 *   A single record in array format, or FALSE if none matched the incoming ID.
 */
function region_manager_regions_load($rid) {
  $regions = array();

  $sql = "SELECT * FROM {region_manager_regions} WHERE rid LIKE '%s%%'";
  $result = db_query($sql, $rid);
  while ($region = db_fetch_array($result)) {
    $region['modules'] = unserialize($region['modules']);
    $region['blocked_blocks'] = explode(', ', $region['blocked_blocks']);
    $regions[$region['rid']] = $region;
  }

  return $regions;
}

/**
 * Public loader function for the full collection of records.
 *
 * In situations where the module's data rarely changes, or is being used
 * frequently (for example, loaded and processed on every page load), this
 * is a prime candidate for caching. See The Beginner's Guide to Caching at
 * http://www.lullabot.com/articles/a_beginners_guide_to_caching_data for more
 * details.
 *
 * This function assumes that results should be sorted by 'weight' -- if your
 * module doesn't store a weight column on its records, or if you need to sort
 * on some other property, this function's SQL should be updated as well.
 *
 * @return
 *   An array of all records, keyed by id.
 */
function region_manager_regions_load_all() {
  $sql = 'SELECT * FROM {region_manager_blocks} ORDER BY theme ASC';
  $result = db_query($sql);

  $regions = array();
  while ($region = db_fetch_array($result)) {
    $region['modules'] = unserialize($region['modules']);
    $regions[$region['rid']] = $region;
  }
  return $regions;
}

/**
 * Inserts a new record, or updates an existing one.
 *
 * @param $region
 *   A record to be saved.
 * @return
 *   The saved record.
 */
function region_manager_region_save($region) {
  region_manager_region_delete($region['rid']);
  drupal_write_record('region_manager_regions', $region);
  return $region;
}

/**
 * Deletes a record, given its unique ID.
 *
 * @param $rid
 *   A string containing the ID of a record.
 */
function region_manager_region_delete($rid) {
  $sql = "DELETE FROM {region_manager_regions} WHERE rid = '%s'";
  db_query($sql, $rid);
}