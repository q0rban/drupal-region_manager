<?php
// $Id$

/**
 * @file
 *   Adds add/remove block controls to select regions.
 */

/**
 * Define constant module permission states.
 */
define('REGION_MANAGER_ALL_ENABLED', 0);
define('REGION_MANAGER_ALL_DISABLED', 1);
define('REGION_MANAGER_CUSTOM', 2);

/**
 * Implementation of hook_help().
 */
function region_manager_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/region_manager':
      return t('Please select for each theme which regions you would like to have region manager available on.');
  }
}

/**
 * Implementation of hook_init().
 */
function region_manager_init() {
  if (user_access('manage regions')) {
    global $theme_key;

    init_theme();

    // Add css and js.
    $path = drupal_get_path('module', 'region_manager');
    drupal_add_css($path .'/region_manager.css');
    drupal_add_js($path .'/region_manager.js');

    // Add the menus.
    $regions = variable_get('region_manager_regions', array());
    if (is_array($regions[$theme_key])) {
      foreach($regions[$theme_key] as $region => $value) {
        if ($value) {
          $menu = region_manager_region_menu($theme_key, $region);
          drupal_set_content($region, $menu);
        }
      }
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function region_manager_menu() {
  $items = array();

  $items['admin/settings/region_manager'] = array(
    'title' => 'Region Manager regions',
    'description' => 'Configure region manager settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('region_manager_regions_form'),
    'access arguments' => array('administer region manager'),
    'file' => 'region_manager.admin.inc',
  );
  $items['admin/settings/region_manager/regions'] = array(
    'title' => 'Regions',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  foreach(list_themes() as $theme) {
    if ($theme->status) {
      $items['admin/settings/region_manager/'. $theme->name] = array(
        'title' => $theme->info['name'],
        'description' => 'Configure region manager settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('region_manager_blocks_form', 3),
        'access arguments' => array('administer region manager'),
        'file' => 'region_manager.admin.inc',
        'type' => MENU_LOCAL_TASK,
      );
    }
  }

  $items['admin/build/region_manager/%/%'] = array(
    'title callback' => 'region_manager_region_title',
    'title arguments' => array(3, 4),
    'description' => 'Configure Region',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('region_manager_manage_form', 3, 4),
    'access arguments' => array('manage regions'),
    'file' => 'region_manager.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Title callback for a region manager.
 */
function region_manager_region_title($theme_key, $region) {
  static $list = array();

  if (!array_key_exists($theme_key, $list)) {
    $info = unserialize(db_result(db_query("SELECT info FROM {system} WHERE type = 'theme' AND name = '%s'", $theme_key)));
    $list[$theme_key] = array_map('t', $info['regions']);
  }

  return $list[$theme_key][$region];
}

/**
 * Implementation of hook_perm().
 */
function region_manager_perm() {
  return array('administer region manager', 'manage regions');
}

/**
 * Implementation of hook_theme().
 */
function region_manager_theme() {
  $items = array();

  $items['region_manager_blocks_form'] = array(
    'arguments' => array('form' => array()),
  );
  $items['region_manager_menu'] = array(
    'arguments' => array('links' => array()),
  );
  $items['region_manager_menu_link'] = array(
    'arguments' => array('title' => NULL, 'path' => NULL, 'options' => array()),
  );

  return $items;
}

/**
 * Get a list of available regions from a specified theme.
 *
 * @param $theme_key
 *   The name of a theme.
 * @return
 *   An array of regions in the form $region['name'] = 'description'.
 */
function region_manager_region_list($theme_key) {
  $settings = variable_get('region_manager_regions', array());
  $regions = system_region_list($theme_key);
  if (!empty($settings)) {
    return array_intersect_key($regions, (array) array_filter($settings[$theme_key]));
  }
}

/**
 * Returns a menu for the associated region.
 */
function region_manager_region_menu($theme_key, $region) {
  static $blocks = NULL;
  static $regions = NULL;

  $existing = $links = array();
  $rid = $theme_key .':'. $region;

  // Load the blocks and regions if we haven't yet.
  if (is_null($blocks)) {
    $blocks = _region_manager_block_rehash($theme_key);
  }
  if (is_null($regions)) {
    // Load all regions for this theme, so we don't have to reload for each region.
    $regions = region_manager_regions_load($theme_key);
  }

  if (empty($blocks)) {
    return;
  }

  $block_name = strtolower(variable_get('region_manager_block_name', 'Block'));
  foreach($blocks as $module => $modblocks) {
    if (is_array($modblocks)) {
      switch($regions[$rid]['modules'][$module]) {
        case REGION_MANAGER_ALL_DISABLED:
          // If they're all disabled for this module, go on to the next module.
          continue;

        case REGION_MANAGER_CUSTOM:
          foreach($modblocks as $delta => $block) {
            $key = $module .':'. $delta;
            if (!in_array($key, $regions[$rid]['blocked_blocks']) && $block['region'] == BLOCK_REGION_NONE) {
              $existing[] = theme('region_manager_menu_link', $block['info'],"region_manager_ajax/$theme_key/$region/$module/$delta");
            }
          }
          break;

        default:
          foreach($modblocks as $delta => $block) {
            if ($block['region'] == BLOCK_REGION_NONE) {
              $existing[] = theme('region_manager_menu_link', $block['info'],"region_manager_ajax/$theme_key/$region/$module/$delta");
            }
          }
          // End default.
      }
    }
    //if (!empty($existing[$module]['children'])) {
      //$existing[$module]['data'] = t('@module @blocks', array('@module' => $module, '@block' => $block_name));
    //}
  }

  $links['existing']['data'] = theme('region_manager_menu_link', t('Add existing'), drupal_get_destination());
  $links['existing']['children'] = $existing;
  return theme('region_manager_menu', $links);
}

/**
 * Theme function that builds the menu from a set of links.
 *
 * @param $links
 *   A multi-dimensional array tree of links.
 *
 * @return
 *   A string containing the fully themed region manager menu.
 *
 * @ingroup themable
 */
function theme_region_manager_menu($links) {
  $output = '<div class="region-manager-menu">';
  $output .= theme('item_list', $links);
  $output .= '</div>';
  return $output;
}

/**
 * Helper function to construct a single region manager menu link.
 *
 * @param $title
 *   The link title.
 * @param $path
 *   The path or href of the link.
 * @param $options
 *   An array of options.
 *
 * @return
 *   A string containing the link, processed by l().
 */
function theme_region_manager_menu_link($title, $path, $options = array()) {
  $dest = drupal_get_destination();

  if ($path != $dest && !isset($options['query']['destination'])) {
    $options['query'] = array('destination' => drupal_get_destination());
  }

  return l($title, $path, $options);
}

/**
 * Loader function for regions by theme or rid.
 *
 * @param $theme_key
 *   A string containing either a theme key only, or theme key and region name
 *   delimited by ':'.
 * @return
 *   A single record in array format, or FALSE if none matched the incoming ID.
 */
function region_manager_regions_load($rid) {
  $regions = array();

  $sql = "SELECT * FROM {region_manager_regions} WHERE rid LIKE '%s%%'";
  $result = db_query($sql, $rid);
  while ($region = db_fetch_array($result)) {
    $region['modules'] = unserialize($region['modules']);
    $region['blocked_blocks'] = explode(', ', $region['blocked_blocks']);
    $regions[$region['rid']] = $region;
  }

  return $regions;
}

/**
 * Public loader function for the full collection of records.
 *
 * In situations where the module's data rarely changes, or is being used
 * frequently (for example, loaded and processed on every page load), this
 * is a prime candidate for caching. See The Beginner's Guide to Caching at
 * http://www.lullabot.com/articles/a_beginners_guide_to_caching_data for more
 * details.
 *
 * This function assumes that results should be sorted by 'weight' -- if your
 * module doesn't store a weight column on its records, or if you need to sort
 * on some other property, this function's SQL should be updated as well.
 *
 * @return
 *   An array of all records, keyed by id.
 */
function region_manager_regions_load_all() {
  $sql = 'SELECT * FROM {region_manager_blocks} ORDER BY theme ASC';
  $result = db_query($sql);

  $regions = array();
  while ($region = db_fetch_array($result)) {
    $region['modules'] = unserialize($region['modules']);
    $regions[$region['rid']] = $region;
  }
  return $regions;
}

/**
 * Inserts a new record, or updates an existing one.
 *
 * @param $region
 *   A record to be saved.
 * @return
 *   The saved record.
 */
function region_manager_region_save($region) {
  region_manager_region_delete($region['rid']);
  drupal_write_record('region_manager_regions', $region);
  return $region;
}

/**
 * Deletes a record, given its unique ID.
 *
 * @param $rid
 *   A string containing the ID of a record.
 */
function region_manager_region_delete($rid) {
  $sql = "DELETE FROM {region_manager_regions} WHERE rid = '%s'";
  db_query($sql, $rid);
}

/**
 * Helper function to assemble the blocks 
 */
function _region_manager_block_rehash($theme_key, $region = NULL) {
  $blocks = array();

  _block_rehash();

  if (is_null($region)) {
    $result = db_query("SELECT * FROM {blocks} WHERE theme = '%s'", $theme_key);
  }
  else {
    $result = db_query("SELECT * FROM {blocks} WHERE theme = '%s' AND region = '%s'", $theme_key, $region);
  }

  while ($block = db_fetch_array($result)) {
    $blocks[$block['module']][$block['delta']] = $block;
  }

  return $blocks;
}