<?php
// $Id$

/**
 * @file
 *   Adds add/remove block controls to select regions.
 */

/**
 * Define constant module permission states.
 */
define('REGION_MANAGER_ALL_ENABLED', 0);
define('REGION_MANAGER_ALL_DISABLED', 1);
define('REGION_MANAGER_CUSTOM', 2);

/**
 * Implementation of hook_help().
 */
function region_manager_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/region_manager':
      return t('Please select for each theme which regions you would like to have region manager available on.');
  }
}

/**
 * Implementation of hook_init().
 */
function region_manager_init() {
  if (user_access('manage regions')) {
    global $theme_key;

    init_theme();

    // Add css and js.
    $path = drupal_get_path('module', 'region_manager');
    drupal_add_css($path .'/region_manager.css');

    // Add the menus.
    $regions = variable_get('region_manager_regions', array());
    if (is_array($regions[$theme_key])) {
      foreach($regions[$theme_key] as $region => $value) {
        if ($value) {
          $menu = region_manager_region_menu($theme_key, $region);
          drupal_set_content($region, $menu);
        }
      }
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function region_manager_menu() {
  $items = array();

  $items['admin/settings/region_manager'] = array(
    'title' => 'Region Manager regions',
    'description' => 'Configure region manager settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('region_manager_regions_form'),
    'access arguments' => array('administer region manager'),
    'file' => 'region_manager.admin.inc',
  );
  $items['admin/settings/region_manager/regions'] = array(
    'title' => 'Regions',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  foreach(list_themes() as $theme) {
    if ($theme->status) {
      $items['admin/settings/region_manager/'. $theme->name] = array(
        'title' => $theme->info['name'],
        'description' => 'Configure region manager settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('region_manager_blocks_form', 3),
        'access arguments' => array('administer region manager'),
        'file' => 'region_manager.admin.inc',
        'type' => MENU_LOCAL_TASK,
      );
    }
  }

  $items['admin/build/region_manager/%/%'] = array(
    'title callback' => 'region_manager_region_title',
    'title arguments' => array(3, 4),
    'description' => 'Configure Region',
    'page callback' => 'region_manager_manage',
    'page arguments' => array(3, 4),
    'access arguments' => array('manage regions'),
    'file' => 'region_manager.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Title callback for a region manager.
 */
function region_manager_region_title($theme_key, $region) {
  static $list = array();

  if (!array_key_exists($theme_key, $list)) {
    $info = unserialize(db_result(db_query("SELECT info FROM {system} WHERE type = 'theme' AND name = '%s'", $theme_key)));
    $list[$theme_key] = array_map('t', $info['regions']);
  }

  return $list[$theme_key][$region];
}

/**
 * Implementation of hook_perm().
 */
function region_manager_perm() {
  return array('administer region manager', 'manage regions');
}

/**
 * Implementation of hook_theme().
 */
function region_manager_theme() {
  $items = array();

  $items['region_manager_blocks_form'] = array(
    'arguments' => array('form' => array()),
  );
  $items['region_manager_menu'] = array(
    'arguments' => array('links' => array()),
  );
  $items['region_manager_menu_link'] = array(
    'arguments' => array('title' => NULL, 'path' => NULL, 'options' => array()),
  );
  $items['region_manager_manage_form'] = array(
    'template' => 'region-manager-manage-form',
    'file' => 'region_manager.pages.inc',
    'arguments' => array('form' => NULL),
  );

  return $items;
}

/**
 * Get a list of available regions from a specified theme.
 *
 * @param $theme_key
 *   The name of a theme.
 * @return
 *   An array of regions in the form $region['name'] = 'description'.
 */
function region_manager_region_list($theme_key) {
  $settings = variable_get('region_manager_regions', array());
  $regions = system_region_list($theme_key);
  if (!empty($settings)) {
    return array_intersect_key($regions, (array) array_filter($settings[$theme_key]));
  }
}

/**
 * Returns a menu for the associated region.
 */
function region_manager_region_menu($theme_key, $region) {
  $links = array();

  $blocks = region_manager_blocks_load_all($theme_key);

  $links['configure'] = l(t('Configure'), "admin/build/region_manager/$theme_key/$region", array('query' => drupal_get_destination()));

  /*
  $links['active']['data'] = t('Active');
  $links['available']['data'] = t('Available');
  $links['disabled']['data'] = t('Disabled');

  // Active and available blocks.
  if (is_array($blocks[$region]['active'])) {
    foreach($blocks[$region]['active'] as $block) {
      $module = $block['module'];
      $delta = $block['delta'];
      if ($block['visibility'] == 1) {
        if (_region_manager_block_check_visibility($block)) {
          $links['active']['children'][] = theme('region_manager_menu_link', $block['info'], "region_manager_ajax/$theme_key/$region/$module/$delta");
        }
        else {
          $links['available']['children'][] = theme('region_manager_menu_link', $block['info'], "region_manager_ajax/$theme_key/$region/$module/$delta");
        }
      }
    }
  }
  if (empty($links['active']['children'])) {
    unset($links['active']);
  }
  if (empty($links['available']['children'])) {
    unset($links['available']);
  }

  // Disabled blocks.
  if (is_array($blocks[$region]['disabled'])) {
    foreach($blocks[$region]['disabled'] as $block) {
      $module = $block['module'];
      $delta = $block['delta'];
      $links['disabled']['children'][] = theme('region_manager_menu_link', $block['info'], "region_manager_ajax/$theme_key/$region/$module/$delta");
    }
  }
  if (empty($links['disabled']['children'])) {
    unset($links['disabled']);
  }*/

  return theme('region_manager_menu', $links);
}

/**
 * Theme function that builds the menu from a set of links.
 *
 * @param $links
 *   A multi-dimensional array tree of links.
 *
 * @return
 *   A string containing the fully themed region manager menu.
 *
 * @ingroup themable
 */
function theme_region_manager_menu($links) {
  $output = '<div class="region-manager-menu">';
  $output .= theme('item_list', $links);
  $output .= '</div>';
  return $output;
}

/**
 * Helper function to construct a single region manager menu link.
 *
 * @param $title
 *   The link title.
 * @param $path
 *   The path or href of the link.
 * @param $options
 *   An array of options.
 *
 * @return
 *   A string containing the link, processed by l().
 */
function theme_region_manager_menu_link($title, $path, $options = array()) {
  if (!isset($options['query']['destination'])) {
    $options['query'] = drupal_get_destination();
  }

  return l($title, $path, $options);
}

/**
 * Loader function for regions by theme or rid.
 *
 * @param $theme_key
 *   A string containing either a theme key only, or theme key and region name
 *   delimited by ':'.
 * @return
 *   A single record in array format, or FALSE if none matched the incoming ID.
 */
function region_manager_regions_load($rid) {
  $regions = array();

  $sql = "SELECT * FROM {region_manager_regions} WHERE rid LIKE '%s%%'";
  $result = db_query($sql, $rid);
  while ($region = db_fetch_array($result)) {
    $region['modules'] = unserialize($region['modules']);
    $region['blocked_blocks'] = explode(', ', $region['blocked_blocks']);
    $regions[$region['rid']] = $region;
  }

  return $regions;
}

/**
 * Public loader function for the full collection of records.
 *
 * In situations where the module's data rarely changes, or is being used
 * frequently (for example, loaded and processed on every page load), this
 * is a prime candidate for caching. See The Beginner's Guide to Caching at
 * http://www.lullabot.com/articles/a_beginners_guide_to_caching_data for more
 * details.
 *
 * This function assumes that results should be sorted by 'weight' -- if your
 * module doesn't store a weight column on its records, or if you need to sort
 * on some other property, this function's SQL should be updated as well.
 *
 * @return
 *   An array of all records, keyed by id.
 */
function region_manager_regions_load_all() {
  $sql = 'SELECT * FROM {region_manager_blocks} ORDER BY theme ASC';
  $result = db_query($sql);

  $regions = array();
  while ($region = db_fetch_array($result)) {
    $region['modules'] = unserialize($region['modules']);
    $regions[$region['rid']] = $region;
  }
  return $regions;
}

/**
 * Inserts a new record, or updates an existing one.
 *
 * @param $region
 *   A record to be saved.
 * @return
 *   The saved record.
 */
function region_manager_region_save($region) {
  region_manager_region_delete($region['rid']);
  drupal_write_record('region_manager_regions', $region);
  return $region;
}

/**
 * Deletes a record, given its unique ID.
 *
 * @param $rid
 *   A string containing the ID of a record.
 */
function region_manager_region_delete($rid) {
  $sql = "DELETE FROM {region_manager_regions} WHERE rid = '%s'";
  db_query($sql, $rid);
}

/**
 * Loads all available blocks organized by region.
 */
function region_manager_blocks_load_all($theme_key, $region = NULL) {
  static $all_blocks = NULL;
  static $records = NULL;

  $blocks = array();

  // Load the blocks and regions if we haven't yet.
  if (is_null($all_blocks)) {
    $all_blocks = _region_manager_block_rehash($theme_key);
  }
  if (is_null($records)) {
    // Load all regions for this theme, so we don't have to reload for each region.
    $records = region_manager_regions_load($theme_key);
  }

  // Might as well quit if we don't have any blocks.
  if (empty($all_blocks)) {
    return;
  }

  if (is_null($region)) {
    foreach(array_keys(region_manager_region_list($theme_key)) as $region) {
      $rid = $theme_key .':'. $region;
      $blocks[$region] = _region_manager_blocks_filter($region, $all_blocks, $records[$rid]);
    }
  }
  else {
    $rid = $theme_key .':'. $region;
    $blocks = _region_manager_blocks_filter($region, $all_blocks, $records[$rid]);
  }

  return $blocks;
}

/**
 * Helper function to filter all enabled and (available) disabled
 * blocks for a particular region.
 */
function _region_manager_blocks_filter($region, $blocks = array(), $record = array()) {
  $output = array();

  foreach($blocks as $module => $modblocks) {
    if (is_array($modblocks)) {

      // If they're all disabled for this module, go on to the next module.
      if ($record['modules'][$module] == REGION_MANAGER_ALL_DISABLED) {
        continue;
      }

      // Otherwise, let's parse through each block.
      else {
        foreach($modblocks as $delta => $block) {
          if ($block['status']) {
            // Only add it to active if it's a part of this region.
            if ($block['region'] == $region) {
              $output[] = $block;
            }
          }
          else {
            // Check to see if we're using custom availability for this module. 
            if ($record['modules'][$module] == REGION_MANAGER_CUSTOM) {
              $key = $module .':'. $delta;
              // Is this block 'blocked'?
              if (!in_array($key, $record['blocked_blocks'])) {
                $output[] = $block;
              }
            }
            // Otherwise add all blocks for this module.
            else {
              $output[] = $block;
            }
          }
        }
      }
    }
  }

  return $output;
}

/**
 * Helper function to assemble the blocks
 */
function _region_manager_block_rehash($theme_key) {
  $blocks = array();
 
  $result = db_query("SELECT * FROM {blocks} WHERE theme = '%s'", $theme_key);
  $old_blocks = array();
  while ($old_block = db_fetch_array($result)) {
    $old_blocks[$old_block['module']][$old_block['delta']] = $old_block;
  }

  $blocks = array();
  // Valid region names for the theme.
  $regions = system_region_list($theme_key);

  foreach (module_list() as $module) {
    $module_blocks = module_invoke($module, 'block', 'list');
    if ($module_blocks) {
      foreach ($module_blocks as $delta => $block) {
        if (empty($old_blocks[$module][$delta])) {
          // If it's a new block, add identifiers.
          $block['module'] = $module;
          $block['delta']  = $delta;
          $block['theme']  = $theme_key;
          if (!isset($block['pages'])) {
            // {block}.pages is type 'text', so it cannot have a
            // default value, and not null, so we need to provide
            // value if the module did not.
            $block['pages']  = '';
          }
          // Add defaults and save it into the database.
          drupal_write_record('blocks', $block);
          // Set region to none if not enabled.
          $block['region'] = $block['status'] ? $block['region'] : BLOCK_REGION_NONE;
          // Add to the list of blocks we return.
          $blocks[$module][$delta] = $block;
        }
        else {
          // If it's an existing block, database settings should overwrite
          // the code. But aside from 'info' everything that's definable in
          // code is stored in the database and we do not store 'info', so we
          // do not need to update the database here.
          // Add 'info' to this block.
          $old_blocks[$module][$delta]['info'] = $block['info'];
          // If the region name does not exist, disable the block and assign it to none.
          if (!empty($old_blocks[$module][$delta]['region']) && !isset($regions[$old_blocks[$module][$delta]['region']])) {
            drupal_set_message(t('The block %info was assigned to the invalid region %region and has been disabled.', array('%info' => $old_blocks[$module][$delta]['info'], '%region' => $old_blocks[$module][$delta]['region'])), 'warning');
            $old_blocks[$module][$delta]['status'] = 0;
            $old_blocks[$module][$delta]['region'] = BLOCK_REGION_NONE;
          }
          else {
            $old_blocks[$module][$delta]['region'] = $old_blocks[$module][$delta]['status'] ? $old_blocks[$module][$delta]['region'] : BLOCK_REGION_NONE;
          }
          // Add this block to the list of blocks we return.
          $blocks[$module][$delta] = $old_blocks[$module][$delta];
          // Remove this block from the list of blocks to be deleted.
          unset($old_blocks[$module][$delta]);
        }
      }
    }
  }

  // Remove blocks that are no longer defined by the code from the database.
  foreach ($old_blocks as $module => $old_module_blocks) {
    foreach ($old_module_blocks as $delta => $block) {
      db_query("DELETE FROM {blocks} WHERE module = '%s' AND delta = '%s' AND theme = '%s'", $module, $delta, $theme_key);
    }
  }
  return $blocks;

}

/**
 * Helper function to determine if the block is visible for a certain path.
 *
 * @return
 *   Boolean FALSE if it's not visible, otherwise a string of the path.
 */
function _region_manager_block_check_visibility($block, $path = NULL) {
  if ($block['visibility'] == 1) {
    $path = is_null($path) ? drupal_get_path_alias($_GET['q']) : $path;
    // Compare with the internal and path alias (if any).
    $page_match = drupal_match_path($path, $block['pages']);
    if ($path != $_GET['q']) {
      $page_match = $page_match || drupal_match_path($_GET['q'], $block['pages']);
    }
  }
  return $page_match ? $path : FALSE;
}